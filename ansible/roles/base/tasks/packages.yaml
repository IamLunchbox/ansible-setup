---

- name: Install gpg
  ansible.builtin.apt:
    name: gpg
    state: present

- name: Check for vscodium-keyfile
  ansible.builtin.stat:
    path: /usr/share/keyrings/vscodium-archive-keyring.gpg
  register: vscodium_keyfile

- name: Set up vscodium
  when: >
    ansible_facts['virtualization_role'] == 'guest' and
    not vscodium_keyfile.stat.exists
  block:
    - name: Create vscodium build-directory
      ansible.builtin.tempfile:
        state: directory
        suffix: _base
      register: build_dir_vscodium

    - name: Download VSCodium Key
      ansible.builtin.get_url:
        url: "https://gitlab.com/paulcarroty/\
          vscodium-deb-rpm-repo/raw/master/pub.gpg"
        dest: "{{ build_dir_vscodium.path }}/vscodium-archive-keyring"
        owner: root
        group: root
        mode: '0600'

    - name: Dearmor VSCodium Key
      ansible.builtin.command:
        cmd: >
          gpg --yes --dearmor
          {{ build_dir_vscodium.path }}/vscodium-archive-keyring
      changed_when: false

    - name: Copy dearmored key
      ansible.builtin.copy:
        src: "{{ build_dir_vscodium.path }}/vscodium-archive-keyring.gpg"
        remote_src: true
        dest: /usr/share/keyrings/vscodium-archive-keyring.gpg
        owner: root
        group: root
        mode: '0644'

    - name: Add VSCodium Repo
      ansible.builtin.apt_repository:
        repo: "deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg ]
          https://paulcarroty.gitlab.io/vscodium-deb-rpm-repo/debs vscodium main"
        state: present
        update_cache: true
    - name: Install codium
      ansible.builtin.apt:
        name: codium
        state: present

# - name: Install VSCodium via snap
#   community.general.snap:
#     name: codium
#     classic: true
#     state: present
#   when: >
#     ansible_facts['virtualization_role'] == 'guest' and
#     not vscodium_keyfile.stat.exists and
#     ansible_facts['distribution'] == "Ubuntu" and
#     no_container_environment

- name: Define package list to install
  ansible.builtin.set_fact:
    package_selection: "pkgs_vm_{{ ansible_facts['virtualization_role'] }}"

- name: Install packages
  ansible.builtin.apt:
    name: "{{ lookup('vars', package_selection) }}"
    state: present

# - name: Setup flatpak
#   community.general.flatpak_remote:
#     name: flathub
#     state: present
#     flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
#     method: user
#   become: false

# - name: Install flatpak packages
#   community.general.flatpak:
#     name:
#       - com.github.Eloston.UngoogledChromium
#     state: present
#     method: user
#   become: false

- name: Install podman
  ansible.builtin.apt:
    name: podman
    state: present
  notify: Enable podman-socket

- name: Check for user namespaces
  ansible.builtin.command:
    cmd: sysctl user/max_user_namespaces
  register: namespaces
  changed_when: false

- name: Enable user-namespaces, if missing
  ansible.posix.sysctl:
    state: present
    name: user.max_user_namespaces
    value: '65535'
    sysctl_set: true
    reload: true
  when: "{{ namespaces.stdout | regex_search('[\\d]{1,5}') | int }} > 0"

- name: Create podman config file
  ansible.builtin.file:
    path: /etc/containers/containers.conf
    state: touch
    owner: root
    group: root
    mode: '0644'
  changed_when: false

- name: Configure podman networking backend
  ansible.builtin.blockinfile:
    block: |
      [network]
      network_backend = "netavark"
    path: /etc/containers/containers.conf
    state: present
  when: "'netavark' in ansible_facts.packages"

- name: Define package list to remove
  ansible.builtin.set_fact:
    package_removal: "rmv_vm_{{ ansible_facts['virtualization_role'] }}"

- name: Remove packages
  ansible.builtin.apt:
    name: "{{ lookup('vars', package_removal) }}"
    state: absent

- name: Install Virtualbox
  ansible.builtin.apt:
    name:
      - virtualbox
    state: present
  when: ansible_facts['virtualization_role'] == "host"
  notify: Add user to vboxusers group

- name: Install Qemu-Agent, if appropriate
  ansible.builtin.apt:
    name:
      - qemu-guest-agent
      - spice-vdagent
    state: present
  when: >
    ansible_facts['virtualization_type'] == "kvm" and
    ansible_facts['virtualization_role'] == "guest"

- name: Check for annoying launcher files
  ansible.builtin.stat:
    path: "/usr/share/applications/{{ hide_launchers }}.desktop"
  loop: "{{ launchers }}"
  loop_control:
    loop_var: hide_launchers
  register: hidden_launchers

- name: Hide annoying launcher files
  ansible.builtin.lineinfile:
    path: "{{ finally_hide_launchers.stat.path }}"
    regexp: '^Hidden='
    line: 'Hidden=true'
    state: present
    create: false
  loop: "{{ hidden_launchers.results | flatten }}"
  loop_control:
    loop_var: finally_hide_launchers
  when: finally_hide_launchers.stat.exists

- name: Upgrading and autoremoving
  ansible.builtin.apt:
    name: "*"
    state: latest
    autoremove: true
    autoclean: true
  when: upgrade_packages
