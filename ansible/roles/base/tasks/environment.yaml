---

- name: Set default timezone
  community.general.timezone:
    name: Europe/Berlin

- name: set console keymap
  ansible.builtin.lineinfile:
    create: true
    owner: root
    group: root
    mode: '0644'
    path: /etc/vconsole.conf
    regexp: '^KEYMAP=\w{2,3}-\w{1,}\s'
    line: "KEYMAP=de-latin1"

- name: Ensure localisation files for '{{ config_system_locale }}' are available
  ansible.builtin.locale_gen:
    name: "{{ config_system_locale }}"
    state: present

- name: Ensure localisation for '{{ config_system_language }}' are available
  ansible.builtin.locale_gen:
    name: "{{ config_system_language }}"
    state: present

- name: Get current lang and language configuration
  ansible.builtin.command: localectl status
  register: lang_status
  changed_when: false
  check_mode: false

- name: Parse 'LANG' from current locale and language configuration
  ansible.builtin.set_fact:
    locale_lang: "{{ lang_status.stdout | \
      regex_search('LANG=([^\n]+)', '\\1') | first }}"

- name: Parse 'LANGUAGE' from current locale and language configuration
  ansible.builtin.set_fact:
    locale_language: "{{ lang_status.stdout | regex_search\
      ('LANGUAGE=([^\n]+)', '\\1') | default([locale_lang], true) | first }}"

- name: Configure language and lang to '{{ config_system_language }}'
  ansible.builtin.command: >
    localectl set-locale LANG={{ config_system_language }}
    LANGUAGE={{ config_system_language }}
  when: >
    locale_language != config_system_language or
    locale_lang != config_system_language

# this always sets up the sub-locales until i found a better workaround
- name: set custom locales
  ansible.builtin.command: >
    update-locale "{{ locale_type.type }}"="{{ locale_type.lang }}"
  loop: "{{ locale_settings }}"
  changed_when: false
  loop_control:
    loop_var: locale_type
