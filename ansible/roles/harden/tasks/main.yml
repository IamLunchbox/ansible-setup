---
# it is a prerequisite to run
# `ansible-galaxy collection install community.general` beforehand
# otherwise ansible could not configure ufw

# Ressources:
# https://github.com/imthenachoman/How-To-Secure-A-Linux-Server
# https://static.open-scap.org/ssg-guides/ssg-rhel7-guide-C2S.html
# https://github.com/trimstray/linux-hardening-checklist
# https://www.cisecurity.org/cis-benchmarks/
# https://wiki.archlinux.org/title/Security
# https://wiki.archlinux.org/title/Sysctl#TCP/IP_stack_hardening

- name: Check for Docker container
  ansible.builtin.set_fact:
    no_container_environment: false
  when: ansible_facts['virtualization_type'] == "podman" or
    ansible_facts['virtualization_type'] == "docker"

- name: Updating cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600

- name: Autoremove beforehand
  ansible.builtin.apt:
    autoremove: true
    autoclean: true

- name: Check for packages
  ansible.builtin.package_facts:
    manager: "auto"

- name: Upgrading
  ansible.builtin.apt:
    name: "*"
    state: latest
  when: upgrade_pkgs or upgrade_pkgs is undefined

- name: Remove possibly dangerous packages
  ansible.builtin.package:
    name: "{{ dangerous_pkgs }}"
    state: absent
    autoremove: true
    autoclean: true
    purge: true

- name: Install security packages
  ansible.builtin.package:
    name: "{{ security_pkgs }}"
    state: present

- name: Implanting custom filesystem and protocol blacklist
  ansible.builtin.copy:
    src: etc/modprobe.d/blacklist-custom.conf
    dest: /etc/modprobe.d/blacklist-custom.conf
    owner: root
    group: root
    mode: '0644'
  when: no_container_environment

- name: Checking for important directories
  ansible.builtin.stat:
    path: "{{ important_dirs }}"
  loop: "{{ important_dir }}"
  loop_control:
    loop_var: important_dirs
  register: important_directories

- name: Restricting access
  ansible.builtin.file:
    path: "{{ restricted_dirs.stat.path }}"
    mode: '0700'
    owner: root
    group: root
  loop: "{{ important_directories.results | flatten }}"
  loop_control:
    loop_var: restricted_dirs
  when: restricted_dirs.stat.exists

- name: Restrict access to home directory
  ansible.builtin.file:
    path: "{{ ansible_facts['user_dir'] }}"
    mode: '0700'
    owner: "{{ ansible_facts['user_uid'] }}"
    group: "{{ ansible_facts['user_gid'] }}"

- name: Define password-restrictions
  ansible.builtin.file:
    path: "/etc/security/pwquality.conf.d"
    owner: root
    group: root
    mode: '0644'
    state: directory

- name: Define password-restrictions
  ansible.builtin.copy:
    src: "etc/security/pwquality.conf.d/difficult-passwords.conf"
    dest: /etc/security/pwquality.conf.d/difficult-passwords.conf
    owner: root
    group: root
    mode: '0644'

- name: Apply password-restrictions
  community.general.pamd:
    name: common-password
    type: password
    control: required
    module_path: pam_pwquality.so

- name: Apply login delay
  community.general.pamd:
    name: common-auth
    type: auth
    control: '[success=1 default=ignore]'
    module_path: pam_unix.so
    new_type: auth
    new_control: optional
    new_module_path: pam_faildelay.so
    state: before

- name: Setting login delay of 3 seconds
  community.general.pamd:
    name: common-auth
    type: auth
    control: optional
    module_path: pam_faildelay.so
    module_arguments: delay=3000000
    state: updated

- name: Harden proc
  ansible.builtin.lineinfile:
    path: /etc/fstab
    create: false
    insertafter: EOF
    line: 'proc     /proc     proc     defaults,hidepid=2     0     0'

- name: Disabling coredumps
  ansible.builtin.lineinfile:
    path: "{{ coredumps.path }}"
    line: "{{ coredumps.line }}"
    owner: root
    group: root
    mode: 0644
    create: true
    insertafter: EOF
  loop:
    - path: '/etc/sysctl.d/local.conf'
      line: 's.suid_dumpable = 0'
    - path: '/etc/security/limits.conf'
      line: '*     hard   core    0'
  loop_control:
    loop_var: coredumps

- name: Harden kernel parameters
  ansible.builtin.copy:
    src: etc/sysctl.d/99-lockdown.conf
    dest: /etc/sysctl.d/99-lockdown.conf
    owner: root
    group: root
    mode: '0644'

- name: Enabling the firefox-apparmor profile
  ansible.builtin.file:
    path: /etc/apparmor.d/disable/usr.bin.firefox
    state: absent
  notify: parse firefox apparmor profile
  when: >
    ("firefox" in ansible_facts["packages"] or
    "firefox-esr" in ansible_facts["packages"]) and
    no_container_environment


- name: Cleanup obsolete packages
  ansible.builtin.apt:
    autoremove: true
    autoclean: true

- name: Setting up firewall rules to default deny all incoming traffic
  community.general.ufw:
    state: enabled
    default: "{{ ufw_rules.default }}"
    direction: "{{ ufw_rules.direction }}"
  loop:
    - direction: outgoing
      default: allow
    - direction: incoming
      default: deny
    - direction: routed
      default: deny
  loop_control:
    loop_var: ufw_rules
  when: no_container_environment
