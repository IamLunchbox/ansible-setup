#!/bin/bash

set -e -u -o pipefail

# Vars
scriptname="$0"
orange='\033[1;33m'
NC='\033[0m'
ansible_flags=("")
export DEBIAN_FRONTEND="noninteractive"

if [[ $(whoami) == "root" ]]; then
  echo "Don't run this script as root. Thank you."
  exit 2
fi

msg() {
  echo -e "${orange}${*}${NC}"
}

deps() {
  msg "Updating"
  sudo apt update -y
  msg "Installing python-debs"
  #shellcheck disable=1091
  source /etc/os-release
  if [[ ${ID} == "kali" ]]; then
    sudo apt install -y python3.11-venv
  else
    sudo apt install -y python3-venv
  fi
  workdir=$(mktemp -d)
  python3 -m venv "${workdir}/venv"
  # shellcheck source=/dev/null
  source "${workdir}/venv/bin/activate"
  python_version="$(python3 -V | cut -d ' ' -f 2 )"
  if [[ ${python_version} =~ ^(3\.8\.[0-9]+)$ ]]; then
    pip3 install ansible-core==2.13
  elif [[ ${python_version} =~ ^(3\.(9|10|11)\.[0-9]+)$ ]]; then
    pip3 install ansible-core==2.14
  else
    exit 4
  fi
  ansible-galaxy collection install community.general 
}

help() {
echo "${scriptname} [-d] [module]
 A wrapper for my ansible setup scripts. Currently supported modules are:
 - admin
 - dev
 - kali

 Commands:
 -h      Help"
}

run() {
if [[ ! -d "./ansible/roles/base" ]]; then
  msg "Could not find the necessary role, cloning into the temporary directory"
  git clone --depth 1 --singe-branch https://github.com/IamLunchbox/ansible-setup "${workdir}/setup"
  cd "${workdir}/setup/ansible"
else
  cd ./ansible
fi
msg "Running ansible now. You will be prompted for your sudo password"
if command -v ansible-playbook &>/dev/null; then
  #shellcheck disable=2086,2048
  ansible-playbook ${ansible_flags[*]} -K ${1}.yaml
elif [[ -x ${HOME}/.local/bin/ansible-playbook ]]; then
  #shellcheck disable=2086,2048
  ${HOME}/.local/bin/ansible-playbook ${ansible_flags[*]} -K ${1}.yaml
else
  msg "I could not find the ansible-playbook. Exiting."
  exit 5
fi
}

#cleanup() {
#for part in ${@}; do
#case $part in
#  "ansible")
#    pip3 remove ansible
#    ;;
#  "pip")
#    sudo apt remove -y python3-pip python3-venv
#    ;;
#esac
#done
#}

if [[ $# == 0 ]] || [[  $# -gt 2 ]]; then
  help
  exit 1
fi

while [[ $# -gt 1 ]]; do
    case "${1}" in
        "-d"|"--debug")
          ansible_flags+=("-v")
          ;;
        *) 
          echo "An Unkown parameter was provided: ${1}"
          ;;
    esac
    shift
done

case "${1}" in
  "dev")
    deps
    run "dev"
    exit 0
    ;;

  "admin")
    deps
    run "admin"
    exit 0
    ;;

  "kali")
    deps
    run "kali"
    exit 0
    ;;

  "core")
    echo "Core is not supported yet"
    exit 6
    #run "core"
    #cleanup "ansible" "pip"
    ;;

  "-h"|"--help"|"help")
    help
    exit 0
    ;;

  *)
    help
    exit 3
    ;;
esac
